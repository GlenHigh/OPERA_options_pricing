import osimport timefrom selenium import webdriverfrom bs4 import BeautifulSoupfrom selenium.webdriver.chrome.options import Optionsimport osimport datetimefrom datetime import datetimefrom datetime import dateimport pandas as pdimport platform as platformfrom chromedriver_py import binary_path # this will get you the path variableos.chdir('/Users/glenhigh/Scrapping/OPERA_options_pricing')def date_to_unix(date):    unx = int(datetime.strptime(date, '%Y-%m-%d %H:%M:%S').strftime("%s"))    return unxdef today_unix():    unx = date_to_unix(datetime.today().strftime('%Y-%m-%d %H:%M:%S'))    return unxdef chrome_version():    osname = platform.system()    if osname == 'Darwin':        installpath = "/Applications/Google\ Chrome.app/Contents/MacOS/Google\ Chrome"    elif osname == 'Windows':        installpath = "C:\Program Files\Google\Chrome\Application\chrome.exe"    elif osname == 'Linux':        installpath = "/usr/bin/google-chrome"    else:        raise NotImplemented(f"Unknown OS '{osname}'")    verstr = os.popen(f"{installpath} --version").read().strip('Google Chrome ').strip()    return verstr#gives elapsed seconds between now and trade date:def trade_date_to_unix(date):    if date[16]=='P':        hh=int(date[11:13])        if hh==12:            hh="00"        else:            hh+=12        mm=(date[14:16])        res=(f"{date[0:11]}{hh}:{mm}")    else:        res=(date[0:15])    return today_unix()-int(datetime.strptime(res, '%Y-%m-%d %H:%M').strftime("%s"))#Kill all headless driversos.system("pkill -f \"(chrome)?(--headless)\"")chrome_options = Options()chrome_options.add_argument("--headless")exec_path = binary_path#'/Users/glenhigh/Scrapping/OPERA_options_pricing/Scrapers/chromedriver'driver = webdriver.Chrome(executable_path=exec_path, options=chrome_options)yahoo_tickers = ["MSFT","AAPL","PFE"]ticker= "AAPL"#day="21/01/2022"#maturity = f"{day} 01:00:00"#unix_maturity = int(datetime.strptime(maturity, '%d/%m/%Y %H:%M:%S').strftime("%s"))myURL = f"https://finance.yahoo.com/quote/{ticker}/options?p={ticker}"driver.get(myURL)############# /!\###  ATTENTION NEEDED: warning##########  here cookies popups and terms blabla is annoying, need to get rid of it first:#we first need to accept terms and conditions of popup window, to do so just click button's xpathdriver.find_elements_by_xpath('//*[@id="consent-page"]/div/div/div/form/div[2]/div[2]/button[1]')[0].click()#we can now start working on actual call/put quotescontent = driver.page_sourcesoup = BeautifulSoup(content,features="html.parser")#get all available dates for which quotes are provided:#dates_html=soup.find_all("option")dates=[]unix=[]for i in range(len(dates_html)):    dates.append(datetime.utcfromtimestamp(int(dates_html[i]['value'])).strftime('%Y-%m-%d %H:%M:%S'))    unix.append(int(dates_html[i]['value']))print(dates)spot = float(soup.find("span", {'class': 'Trsdu(0.3s) Fw(b) Fz(36px) Mb(-4px) D(ib)'}).string)is_firstrun = Truefor i in range(len(unix)):    unix_maturity = unix[i]    myURL = f"https://finance.yahoo.com/quote/{ticker}/options?date={unix_maturity}&p={ticker}"    print(f"Run {i} log info:")    print(f"Unix : {unix_maturity}")    print(f"URL : {myURL}")    driver.get(myURL)    content = driver.page_source    soup = BeautifulSoup(content, features="html.parser")    ##########    ### /!\###  ATTENTION NEEDED: TODO    ##########  class names are to that day hypothetical, needs more invests (Bd(0) in call table class name but not put???)    #get call and put tables contents as well as spot    call_table = soup.find("table", {'class': 'calls W(100%) Pos(r) Bd(0) Pt(0) list-options'})    put_table = soup.find("table", {'class': 'puts W(100%) Pos(r) list-options'})    if(is_firstrun):        df_call = pd.read_html(str(call_table))[0]        df_put = pd.read_html(str(put_table))[0]        print("Current sub dataframe:")        print(df_call.head())        #add date column to call dataframe and create a macro dataframe that will hold all put prices        call_dates = [dates[i]]*df_call.shape[0]        df_call.insert(0,'Date',call_dates,True)        full_call = df_call        #same for puts        put_dates = [dates[i]] * df_put.shape[0]        df_put.insert(0, 'Date',put_dates, True)        full_put = df_put        #del df_call        #del df_put    else:#here full dataframes already exist, just append call/put dfs into it        #df_call.update(pd.read_html(str(call_table))[0])        #df_put.update(pd.read_html(str(put_table))[0])        df_call=pd.read_html(str(call_table))[0]        df_put=pd.read_html(str(put_table))[0]        call_dates = [dates[i]] * df_call.shape[0]        df_call.insert(0, 'Date', call_dates, True)        full_call=pd.concat([full_call,df_call], ignore_index = True, axis = 0)        put_dates = [dates[i]] * df_put.shape[0]        df_put.insert(0,'Date', put_dates, True)        full_put=pd.concat([full_put,df_put], ignore_index = True, axis = 0)        print("Current sub dataframe:")        print(df_call.head())        #del df_call        #del df_put    is_firstrun = False    print()    print("=====END=====")print(f"Spot is {spot}")today = date.today()d1 = today.strftime("%d-%m-%Y")call_name = f"Market_data/Calls_{ticker}_{d1}.csv"put_name = f"Market_data/Puts_{ticker}_{d1}.csv"call_name_last = f"Market_data/Calls_{ticker}_Last.csv"put_name_last = f"Market_data/Puts_{ticker}_Last.csv"full_call.to_csv(call_name,index=False)full_put.to_csv(put_name,index=False)#now reformat last trade date for data fetcherfull_call['Last Trade Date']=full_call['Last Trade Date'].apply(trade_date_to_unix)full_put['Last Trade Date']=full_put['Last Trade Date'].apply(trade_date_to_unix)full_call=full_call['Last Trade Date']<86400full_put=full_put['Last Trade Date']<86400full_call.to_csv(call_name_last,index=False)full_put.to_csv(put_name_last,index=False)print("Closing driver...")driver.closeprint("Driver closed")os.system("pkill -f \"(chrome)?(--headless)\"")